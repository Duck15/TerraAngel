--- src/Terraria/Terraria/GameContent/Drawing/TileDrawing.cs
+++ src/TerraAngel/Terraria/GameContent/Drawing/TileDrawing.cs
@@ -90,8 +_,6 @@
     private Color _highQualityLightingRequirement;
     private Color _mediumQualityLightingRequirement;
     private static readonly Vector2 _zero;
-    private ThreadLocal<TileDrawInfo> _currentTileDrawInfo = new ThreadLocal<TileDrawInfo>(() => new TileDrawInfo());
-    private TileDrawInfo _currentTileDrawInfoNonThreaded = new TileDrawInfo();
     private Vector3[] _glowPaintColorSlices = new Vector3[9] { Vector3.One, Vector3.One, Vector3.One, Vector3.One, Vector3.One, Vector3.One, Vector3.One, Vector3.One, Vector3.One };
     private List<DrawData> _voidLensData = new List<DrawData>();
     private bool[] _tileSolid => Main.tileSolid;
@@ -138,10 +_,6 @@
             for (int j = firstTileX - 2; j < lastTileX + 2; j++)
             {
                 Tile tile = Main.tile[j, i];
-                if (tile == null)
-                {
-                    continue;
-                }
 
                 if (tile.active())
                 {
@@ -384,7 +_,6 @@
             for (int j = firstTileX - 2; j < lastTileX + 2; j++)
             {
                 Tile tile = Main.tile[j, i];
-                if (tile != null)
                 {
                     DrawTile_LiquidBehindTile(solidLayer: false, inFrontOfPlayers: false, waterStyleOverride, unscaledPosition, vector, j, i, tile);
                 }
@@ -429,31 +_,24 @@
         GetScreenDrawArea(unscaledPosition, vector + (Main.Camera.UnscaledPosition - Main.Camera.ScaledPosition), out var firstTileX, out var lastTileX, out var firstTileY, out var lastTileY);
         byte b = (byte)(100f + 150f * Main.martianLight);
         _martianGlow = new Color(b, b, b, 0);
-        TileDrawInfo value = _currentTileDrawInfo.Value;
+        TileDrawInfo value = new TileDrawInfo();
+        SpriteBatch spriteBatch = Main.spriteBatch;
         for (int i = firstTileY; i < lastTileY + 4; i++)
         {
             for (int j = firstTileX - 2; j < lastTileX + 2; j++)
             {
-                Tile tile = Main.tile[j, i];
-                if (tile == null)
-                {
-                    tile = new Tile();
-                    Main.tile[j, i] = tile;
-                    Main.mapTime += 60;
-                }
-                else
-                {
+                ref TileData tile = ref Main.tile.GetTileRef(j, i);
                     if (!tile.active() || IsTileDrawLayerSolid(tile.type) != solidLayer)
                     {
                         continue;
                     }
-
                     if (solidLayer)
                     {
-                        DrawTile_LiquidBehindTile(solidLayer, inFrontOfPlayers: false, waterStyleOverride, unscaledPosition, vector, j, i, tile);
+                        DrawTile_LiquidBehindTile(solidLayer, inFrontOfPlayers: false, waterStyleOverride, unscaledPosition, vector, j, i, ref tile);
                     }
 
                     ushort type = tile.type;
+
                     short frameX = tile.frameX;
                     short frameY = tile.frameY;
                     if (!TextureAssets.Tile[type].IsLoaded)
@@ -628,7 +_,7 @@
                         case 374:
                         case 375:
                         case 461:
-                            EmitLiquidDrops(i, j, tile, type);
+                            EmitLiquidDrops(i, j, ref tile, type);
                             continue;
                         case 491:
                             if (flag && frameX == 18 && frameY == 18)
@@ -659,7 +_,7 @@
 
                             continue;
                         default:
-                            if (ShouldSwayInWind(j, i, tile))
+                            if (ShouldSwayInWind(j, i, ref tile))
                             {
                                 if (flag)
                                 {
@@ -672,8 +_,98 @@
                             break;
                     }
 
-                    DrawSingleTile(value, solidLayer, waterStyleOverride, unscaledPosition, vector, j, i);
-                }
+                    if (TerraAngel.Hooks.DrawHooks.LightModificationCache?.FullBright ?? false)
+                    {
+                    Color tileColor = new Color(new Vector3(TerraAngel.Hooks.DrawHooks.LightModificationCache.Brightness));
+                    ushort typeCache = tile.type;
+                    short tileFrameX = tile.frameX;
+                    short tileFrameY = tile.frameY;
+                    GetTileDrawData(j, i, ref tile, typeCache, ref tileFrameX, ref tileFrameY, out value.tileWidth, out value.tileHeight, out value.tileTop, out value.halfBrickHeight, out value.addFrX, out value.addFrY, out value.tileSpriteEffect, out value.glowTexture, out value.glowSourceRect, out value.glowColor);
+                    Texture2D texture = GetTileDrawTexture(ref tile, j, i);
+                    Rectangle normalTileRect = new Rectangle(tileFrameX + value.addFrX, tileFrameY + value.addFrY, value.tileWidth, value.tileHeight - value.halfBrickHeight);
+                    Vector2 normalTilePosition = new Vector2((float)(j * 16 - (int)unscaledPosition.X) - ((float)value.tileWidth - 16f) / 2f, i * 16 - (int)unscaledPosition.Y + value.tileTop + value.halfBrickHeight) + vector;
+
+                    int slope = tile.slope();
+                    if (slope > 0)
+                    {
+                        if (TileID.Sets.Platforms[typeCache])
+                        {
+                            spriteBatch.Draw(texture, normalTilePosition, normalTileRect, tileColor, 0f, _zero, 1f, value.tileSpriteEffect, 0f);
+                            if (slope == 1 && Main.tile[j + 1, i + 1].active() && Main.tileSolid[Main.tile[j + 1, i + 1].type] && Main.tile[j + 1, i + 1].slope() != 2 && !Main.tile[j + 1, i + 1].halfBrick() && (!Main.tile[j, i + 1].active() || (Main.tile[j, i + 1].blockType() != 0 && Main.tile[j, i + 1].blockType() != 5) || (!TileID.Sets.BlocksStairs[Main.tile[j, i + 1].type] && !TileID.Sets.BlocksStairsAbove[Main.tile[j, i + 1].type])))
+                            {
+                                Rectangle rectValue = new Rectangle(198, tileFrameY, 16, 16);
+                                if (TileID.Sets.Platforms[Main.tile[j + 1, i + 1].type] && Main.tile[j + 1, i + 1].slope() == 0)
+                                {
+                                    rectValue.X = 324;
+                                }
+
+                                spriteBatch.Draw(texture, normalTilePosition + new Vector2(0f, 16f), rectValue, tileColor, 0f, _zero, 1f, value.tileSpriteEffect, 0f);
+                            }
+                            else if (slope == 2 && Main.tile[j - 1, i + 1].active() && Main.tileSolid[Main.tile[j - 1, i + 1].type] && Main.tile[j - 1, i + 1].slope() != 1 && !Main.tile[j - 1, i + 1].halfBrick() && (!Main.tile[j, i + 1].active() || (Main.tile[j, i + 1].blockType() != 0 && Main.tile[j, i + 1].blockType() != 4) || (!TileID.Sets.BlocksStairs[Main.tile[j, i + 1].type] && !TileID.Sets.BlocksStairsAbove[Main.tile[j, i + 1].type])))
+                            {
+                                Rectangle value2 = new Rectangle(162, tileFrameY, 16, 16);
+                                if (TileID.Sets.Platforms[Main.tile[j - 1, i + 1].type] && Main.tile[j - 1, i + 1].slope() == 0)
+                                {
+                                    value2.X = 306;
+                                }
+
+                                spriteBatch.Draw(texture, normalTilePosition + new Vector2(0f, 16f), value2, tileColor, 0f, _zero, 1f, value.tileSpriteEffect, 0f);
+                            }
+
+                            continue;
+                        }
+                        if (TileID.Sets.HasSlopeFrames[typeCache])
+                        {
+                            spriteBatch.Draw(texture, normalTilePosition, new Rectangle(tileFrameX + value.addFrX, tileFrameY + value.addFrY, 16, 16), tileColor, 0f, _zero, 1f, value.tileSpriteEffect, 0f);
+                            continue;
+                        }
+
+                        int l_num = slope;
+                        int l_num2 = 2;
+                        for (int l_i = 0; l_i < 8; l_i++)
+                        {
+                            int l_num3 = l_i * -2;
+                            int l_num4 = 16 - l_i * 2;
+                            int l_num5 = 16 - l_num4;
+                            int l_num6;
+                            switch (l_num)
+                            {
+                                case 1:
+                                    l_num3 = 0;
+                                    l_num6 = l_i * 2;
+                                    l_num4 = 14 - l_i * 2;
+                                    l_num5 = 0;
+                                    break;
+                                case 2:
+                                    l_num3 = 0;
+                                    l_num6 = 16 - l_i * 2 - 2;
+                                    l_num4 = 14 - l_i * 2;
+                                    l_num5 = 0;
+                                    break;
+                                case 3:
+                                    l_num6 = l_i * 2;
+                                    break;
+                                default:
+                                    l_num6 = 16 - l_i * 2 - 2;
+                                    break;
+                            }
+
+                            spriteBatch.Draw(texture, normalTilePosition + new Vector2(l_num6, l_i * l_num2 + l_num3), new Rectangle(tileFrameX + value.addFrX + l_num6, tileFrameY + value.addFrY + l_num5, l_num2, l_num4), tileColor, 0f, _zero, 1f, value.tileSpriteEffect, 0f);
+                        }
+
+                        int l_num7 = ((l_num <= 2) ? 14 : 0);
+                        spriteBatch.Draw(texture, normalTilePosition + new Vector2(0f, l_num7), new Rectangle(tileFrameX + value.addFrX, tileFrameY + value.addFrY + l_num7, 16, 2), tileColor, 0f, _zero, 1f, value.tileSpriteEffect, 0f);
+                        continue;
+                    }
+                    else
+                    {
+                        spriteBatch.Draw(texture, normalTilePosition, normalTileRect, tileColor, 0f, _zero, 1f, value.tileSpriteEffect, 0f);
+                    }
+                    continue;
+                    }
+
+                    value.tileDataCache = tile;
+                    DrawSingleTile(ref value, solidLayer, waterStyleOverride, unscaledPosition, vector, j, i);
             }
         }
 
@@ -742,9 +_,8 @@
         }
     }
 
-    private void DrawSingleTile(TileDrawInfo drawData, bool solidLayer, int waterStyleOverride, Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY)
+    private void DrawSingleTile(ref TileDrawInfo drawData, bool solidLayer, int waterStyleOverride, Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY)
     {
-        drawData.tileCache = Main.tile[tileX, tileY];
         drawData.typeCache = drawData.tileCache.type;
         drawData.tileFrameX = drawData.tileCache.frameX;
         drawData.tileFrameY = drawData.tileCache.frameY;
@@ -754,10 +_,9 @@
             return;
         }
 
-        GetTileDrawData(tileX, tileY, drawData.tileCache, drawData.typeCache, ref drawData.tileFrameX, ref drawData.tileFrameY, out drawData.tileWidth, out drawData.tileHeight, out drawData.tileTop, out drawData.halfBrickHeight, out drawData.addFrX, out drawData.addFrY, out drawData.tileSpriteEffect, out drawData.glowTexture, out drawData.glowSourceRect, out drawData.glowColor);
+        GetTileDrawData(tileX, tileY, ref drawData.tileDataCache, drawData.typeCache, ref drawData.tileFrameX, ref drawData.tileFrameY, out drawData.tileWidth, out drawData.tileHeight, out drawData.tileTop, out drawData.halfBrickHeight, out drawData.addFrX, out drawData.addFrY, out drawData.tileSpriteEffect, out drawData.glowTexture, out drawData.glowSourceRect, out drawData.glowColor);
         drawData.drawTexture = GetTileDrawTexture(drawData.tileCache, tileX, tileY);
         Texture2D highlightTexture = null;
-        Rectangle empty = Rectangle.Empty;
         Color highlightColor = Color.Transparent;
         if (TileID.Sets.HasOutlines[drawData.typeCache])
         {
@@ -848,10 +_,10 @@
         {
             if (!Lighting.UpdateEveryFrame || new FastRandom(Main.TileFrameSeed).WithModifier(tileX, tileY).Next(4) == 0)
             {
-                DrawTiles_EmitParticles(tileY, tileX, drawData.tileCache, drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY, drawData.tileLight);
+                DrawTiles_EmitParticles(tileY, tileX, ref drawData.tileDataCache, drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY, drawData.tileLight);
             }
 
-            drawData.tileLight = DrawTiles_GetLightOverride(tileY, tileX, drawData.tileCache, drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY, drawData.tileLight);
+            drawData.tileLight = DrawTiles_GetLightOverride(tileY, tileX, ref drawData.tileDataCache, drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY, drawData.tileLight);
         }
 
         bool flag = false;
@@ -865,7 +_,7 @@
             flag = true;
         }
 
-        flag &= IsVisible(drawData.tileCache);
+        flag &= IsVisible(ref drawData.tileDataCache);
         CacheSpecialDraws_Part1(tileX, tileY, drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY, !flag);
         CacheSpecialDraws_Part2(tileX, tileY, drawData, !flag);
         if (drawData.typeCache == 72 && drawData.tileFrameX >= 36)
@@ -1011,15 +_,15 @@
 
         if (drawData.typeCache == 314)
         {
-            DrawTile_MinecartTrack(screenPosition, screenOffset, tileX, tileY, drawData);
+            DrawTile_MinecartTrack(screenPosition, screenOffset, tileX, tileY, ref drawData);
         }
         else if (drawData.typeCache == 171)
         {
-            DrawXmasTree(screenPosition, screenOffset, tileX, tileY, drawData);
+            DrawXmasTree(screenPosition, screenOffset, tileX, tileY, ref drawData);
         }
         else
         {
-            DrawBasicTile(screenPosition, screenOffset, tileX, tileY, drawData, rectangle, vector);
+            DrawBasicTile(screenPosition, screenOffset, tileX, tileY, ref drawData, rectangle, vector);
         }
 
         if (Main.tileGlowMask[drawData.tileCache.type] != -1)
@@ -1205,14 +_,12 @@
 
         if (highlightTexture != null)
         {
-            empty = new Rectangle(drawData.tileFrameX + drawData.addFrX, drawData.tileFrameY + drawData.addFrY, drawData.tileWidth, drawData.tileHeight);
-            int num19 = 0;
-            int num20 = 0;
-            Main.spriteBatch.Draw(highlightTexture, new Vector2((float)(tileX * 16 - (int)screenPosition.X) - ((float)drawData.tileWidth - 16f) / 2f + (float)num19, tileY * 16 - (int)screenPosition.Y + drawData.tileTop + num20) + screenOffset, empty, highlightColor, 0f, _zero, 1f, drawData.tileSpriteEffect, 0f);
+            Rectangle rect = new Rectangle(drawData.tileFrameX + drawData.addFrX, drawData.tileFrameY + drawData.addFrY, drawData.tileWidth, drawData.tileHeight);
+            Main.spriteBatch.Draw(highlightTexture, new Vector2((float)(tileX * 16 - (int)screenPosition.X) - ((float)drawData.tileWidth - 16f) / 2f, tileY * 16 - (int)screenPosition.Y + drawData.tileTop) + screenOffset, rect, highlightColor, 0f, _zero, 1f, drawData.tileSpriteEffect, 0f);
         }
     }
 
-    private bool IsVisible(Tile tile)
+    private bool IsVisible(ref TileData tile)
     {
         bool flag = tile.invisibleBlock();
         switch (tile.type)
@@ -1238,7 +_,9 @@
         return true;
     }
 
+    private Texture2D GetTileDrawTexture(Tile tile, int tileX, int tileY) => GetTileDrawTexture(ref tile.RefData, tileX, tileY);
+
-    private Texture2D GetTileDrawTexture(Tile tile, int tileX, int tileY)
+    private Texture2D GetTileDrawTexture(ref TileData tile, int tileX, int tileY)
     {
         Texture2D result = TextureAssets.Tile[tile.type].Value;
         int tileStyle = 0;
@@ -1302,9 +_,9 @@
         return result;
     }
 
-    private void DrawBasicTile(Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, TileDrawInfo drawData, Rectangle normalTileRect, Vector2 normalTilePosition)
+    private void DrawBasicTile(Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, ref TileDrawInfo drawData, Rectangle normalTileRect, Vector2 normalTilePosition)
     {
-        if (TileID.Sets.Platforms[drawData.typeCache] && WorldGen.IsRope(tileX, tileY) && Main.tile[tileX, tileY - 1] != null)
+        if (TileID.Sets.Platforms[drawData.typeCache] && WorldGen.IsRope(tileX, tileY))
         {
             _ = Main.tile[tileX, tileY - 1].type;
             int y = (tileY + tileX) % 3 * 18;
@@ -1317,7 +_,7 @@
 
         if (drawData.tileCache.slope() > 0)
         {
-            if (TileID.Sets.Platforms[drawData.tileCache.type])
+            if (TileID.Sets.Platforms[drawData.typeCache])
             {
                 Main.spriteBatch.Draw(drawData.drawTexture, normalTilePosition, normalTileRect, drawData.finalColor, 0f, _zero, 1f, drawData.tileSpriteEffect, 0f);
                 if (drawData.tileCache.slope() == 1 && Main.tile[tileX + 1, tileY + 1].active() && Main.tileSolid[Main.tile[tileX + 1, tileY + 1].type] && Main.tile[tileX + 1, tileY + 1].slope() != 2 && !Main.tile[tileX + 1, tileY + 1].halfBrick() && (!Main.tile[tileX, tileY + 1].active() || (Main.tile[tileX, tileY + 1].blockType() != 0 && Main.tile[tileX, tileY + 1].blockType() != 5) || (!TileID.Sets.BlocksStairs[Main.tile[tileX, tileY + 1].type] && !TileID.Sets.BlocksStairsAbove[Main.tile[tileX, tileY + 1].type])))
@@ -1439,7 +_,7 @@
 
         if (Lighting.NotRetro && _tileSolid[drawData.typeCache] && !drawData.tileCache.halfBrick() && !TileID.Sets.DontDrawTileSliced[drawData.tileCache.type])
         {
-            DrawSingleTile_SlicedBlock(normalTilePosition, tileX, tileY, drawData);
+            DrawSingleTile_SlicedBlock(normalTilePosition, tileX, tileY, ref drawData);
             return;
         }
 
@@ -1545,7 +_,7 @@
 
     public static int GetTreeVariant(int x, int y)
     {
-        if (Main.tile[x, y] == null || !Main.tile[x, y].active())
+        if (!Main.tile[x, y].active())
         {
             return -1;
         }
@@ -2869,7 +_,7 @@
         return num;
     }
 
-    private void DrawSingleTile_SlicedBlock(Vector2 normalTilePosition, int tileX, int tileY, TileDrawInfo drawData)
+    private void DrawSingleTile_SlicedBlock(Vector2 normalTilePosition, int tileX, int tileY, ref TileDrawInfo drawData)
     {
         Color color = default(Color);
         Vector2 origin = default(Vector2);
@@ -2878,7 +_,7 @@
         Vector2 position = default(Vector2);
         if (drawData.tileLight.R > _highQualityLightingRequirement.R || drawData.tileLight.G > _highQualityLightingRequirement.G || drawData.tileLight.B > _highQualityLightingRequirement.B)
         {
-            Vector3[] slices = drawData.colorSlices;
+            Span<Vector3> slices = drawData.colorSlices;
             Lighting.GetColor9Slice(tileX, tileY, ref slices);
             Vector3 vector = drawData.tileLight.ToVector3();
             Vector3 tint = drawData.colorTint.ToVector3();
@@ -2940,23 +_,9 @@
                 position.Y = normalTilePosition.Y + (float)value.Y;
                 value.X += drawData.tileFrameX + drawData.addFrX;
                 value.Y += drawData.tileFrameY + drawData.addFrY;
-                int num = (int)(tileLight.X * 255f);
-                int num2 = (int)(tileLight.Y * 255f);
-                int num3 = (int)(tileLight.Z * 255f);
-                if (num > 255)
-                {
-                    num = 255;
-                }
-
-                if (num2 > 255)
-                {
-                    num2 = 255;
-                }
-
-                if (num3 > 255)
-                {
-                    num3 = 255;
-                }
+                int num = Math.Clamp((int)(tileLight.X * 255f), 0, 255);
+                int num2 = Math.Clamp((int)(tileLight.Y * 255f), 0, 255);
+                int num3 = Math.Clamp((int)(tileLight.Z * 255f), 0, 255);
 
                 num3 <<= 16;
                 num2 <<= 8;
@@ -2966,7 +_,7 @@
         }
         else if (drawData.tileLight.R > _mediumQualityLightingRequirement.R || drawData.tileLight.G > _mediumQualityLightingRequirement.G || drawData.tileLight.B > _mediumQualityLightingRequirement.B)
         {
-            Vector3[] slices2 = drawData.colorSlices;
+            Span<Vector3> slices2 = drawData.colorSlices;
             Lighting.GetColor4Slice(tileX, tileY, ref slices2);
             Vector3 vector2 = drawData.tileLight.ToVector3();
             Vector3 tint2 = drawData.colorTint.ToVector3();
@@ -3003,23 +_,9 @@
                 position.Y = normalTilePosition.Y + (float)value.Y;
                 value.X += drawData.tileFrameX + drawData.addFrX;
                 value.Y += drawData.tileFrameY + drawData.addFrY;
-                int num4 = (int)(tileLight.X * 255f);
-                int num5 = (int)(tileLight.Y * 255f);
-                int num6 = (int)(tileLight.Z * 255f);
-                if (num4 > 255)
-                {
-                    num4 = 255;
-                }
-
-                if (num5 > 255)
-                {
-                    num5 = 255;
-                }
-
-                if (num6 > 255)
-                {
-                    num6 = 255;
-                }
+                int num4 = Math.Clamp((int)(tileLight.X * 255f), 0, 255);
+                int num5 = Math.Clamp((int)(tileLight.Y * 255f), 0, 255);
+                int num6 = Math.Clamp((int)(tileLight.Z * 255f), 0, 255);
 
                 num6 <<= 16;
                 num5 <<= 8;
@@ -3033,9 +_,9 @@
         }
     }
 
-    private void DrawXmasTree(Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, TileDrawInfo drawData)
+    private void DrawXmasTree(Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, ref TileDrawInfo drawData)
     {
-        if (tileY - drawData.tileFrameY > 0 && drawData.tileFrameY == 7 && Main.tile[tileX, tileY - drawData.tileFrameY] != null)
+        if (tileY - drawData.tileFrameY > 0 && drawData.tileFrameY == 7)
         {
             drawData.tileTop -= 16 * drawData.tileFrameY;
             drawData.tileFrameX = Main.tile[tileX, tileY - drawData.tileFrameY].frameX;
@@ -3154,13 +_,13 @@
         }
     }
 
-    private void DrawTile_MinecartTrack(Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, TileDrawInfo drawData)
+    private void DrawTile_MinecartTrack(Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, ref TileDrawInfo drawData)
     {
         drawData.tileLight = GetFinalLight(drawData.tileCache, drawData.typeCache, drawData.tileLight, drawData.colorTint);
         Minecart.TrackColors(tileX, tileY, drawData.tileCache, out var frontColor, out var backColor);
         drawData.drawTexture = GetTileDrawTexture(drawData.tileCache, tileX, tileY, frontColor);
         Texture2D tileDrawTexture = GetTileDrawTexture(drawData.tileCache, tileX, tileY, backColor);
-        if (WorldGen.IsRope(tileX, tileY) && Main.tile[tileX, tileY - 1] != null)
+        if (WorldGen.IsRope(tileX, tileY))
         {
             _ = Main.tile[tileX, tileY - 1].type;
             int y = (tileY + tileX) % 3 * 18;
@@ -3205,35 +_,13 @@
         }
     }
 
+    private void DrawTile_LiquidBehindTile(bool solidLayer, bool inFrontOfPlayers, int waterStyleOverride, Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, Tile tileCache) => DrawTile_LiquidBehindTile(solidLayer, inFrontOfPlayers, waterStyleOverride, screenPosition, screenOffset, tileX, tileY, ref tileCache.RefData);
-    private void DrawTile_LiquidBehindTile(bool solidLayer, bool inFrontOfPlayers, int waterStyleOverride, Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, Tile tileCache)
+    private void DrawTile_LiquidBehindTile(bool solidLayer, bool inFrontOfPlayers, int waterStyleOverride, Vector2 screenPosition, Vector2 screenOffset, int tileX, int tileY, ref TileData tileCache)
     {
-        Tile tile = Main.tile[tileX + 1, tileY];
-        Tile tile2 = Main.tile[tileX - 1, tileY];
-        Tile tile3 = Main.tile[tileX, tileY - 1];
-        Tile tile4 = Main.tile[tileX, tileY + 1];
-        if (tile == null)
-        {
-            tile = new Tile();
-            Main.tile[tileX + 1, tileY] = tile;
-        }
-
-        if (tile2 == null)
-        {
-            tile2 = new Tile();
-            Main.tile[tileX - 1, tileY] = tile2;
-        }
-
-        if (tile3 == null)
-        {
-            tile3 = new Tile();
-            Main.tile[tileX, tileY - 1] = tile3;
-        }
-
-        if (tile4 == null)
-        {
-            tile4 = new Tile();
-            Main.tile[tileX, tileY + 1] = tile4;
-        }
+        ref TileData tile =  ref Main.tile.GetTileRef(tileX + 1, tileY);
+        ref TileData tile2 = ref Main.tile.GetTileRef(tileX - 1, tileY);
+        ref TileData tile3 = ref Main.tile.GetTileRef(tileX, tileY - 1);
+        ref TileData tile4 = ref Main.tile.GetTileRef(tileX, tileY + 1);
 
         if (!tileCache.active() || tileCache.inActive() || _tileSolidTop[tileCache.type] || (tileCache.halfBrick() && (tile2.liquid > 160 || tile.liquid > 160) && Main.instance.waterfallManager.CheckForWaterfall(tileX, tileY)) || (TileID.Sets.BlocksWaterDrawingBehindSelf[tileCache.type] && tileCache.slope() == 0))
         {
@@ -3524,7 +_,7 @@
             {
                 if (Main.IsLiquidStyleWater(i) && Main.liquidAlpha[i] > 0f && i != num2)
                 {
-                    DrawPartialLiquid(!solidLayer, tileCache, ref position, ref liquidSize, i, ref vertices);
+                    DrawPartialLiquid(!solidLayer, ref tileCache, ref position, ref liquidSize, i, ref vertices);
                     flag7 = true;
                     break;
                 }
@@ -3542,7 +_,7 @@
             LiquidRenderer.SetShimmerVertexColors(ref colors, solidLayer ? 0.75f : 1f, tileX, tileY);
         }
 
-        DrawPartialLiquid(!solidLayer, tileCache, ref position, ref liquidSize, num2, ref colors);
+        DrawPartialLiquid(!solidLayer, ref tileCache, ref position, ref liquidSize, num2, ref colors);
     }
 
     private void CacheSpecialDraws_Part1(int tileX, int tileY, int tileType, int drawDataTileFrameX, int drawDataTileFrameY, bool skipDraw)
@@ -3851,9 +_,11 @@
         }
     }
 
+    private static bool IsTileDangerous(Player localPlayer, Tile tileCache, ushort typeCache) => IsTileDangerous(localPlayer, ref tileCache.RefData, typeCache);
+
-    private static bool IsTileDangerous(Player localPlayer, Tile tileCache, ushort typeCache)
+    private static bool IsTileDangerous(Player localPlayer, ref TileData tileCache, ushort typeCache)
     {
-        bool flag = false || typeCache == 135 || typeCache == 137 || TileID.Sets.Boulders[typeCache] || typeCache == 141 || typeCache == 210 || typeCache == 442 || typeCache == 443 || typeCache == 444 || typeCache == 411 || typeCache == 485 || typeCache == 85 || typeCache == 654 || (typeCache == 314 && Minecart.IsPressurePlate(tileCache));
+        bool flag = false || typeCache == 135 || typeCache == 137 || TileID.Sets.Boulders[typeCache] || typeCache == 141 || typeCache == 210 || typeCache == 442 || typeCache == 443 || typeCache == 444 || typeCache == 411 || typeCache == 485 || typeCache == 85 || typeCache == 654 || (typeCache == 314 && Minecart.IsPressurePlate(ref tileCache));
         flag |= Main.getGoodWorld && typeCache == 230;
         flag |= Main.dontStarveWorld && typeCache == 80;
         if (tileCache.slope() == 0 && !tileCache.inActive())
@@ -3896,7 +_,7 @@
         }
     }
 
-    private void DrawPartialLiquid(bool behindBlocks, Tile tileCache, ref Vector2 position, ref Rectangle liquidSize, int liquidType, ref VertexColors colors)
+    private void DrawPartialLiquid(bool behindBlocks, ref TileData tileCache, ref Vector2 position, ref Rectangle liquidSize, int liquidType, ref VertexColors colors)
     {
         int num = tileCache.slope();
         bool flag = !TileID.Sets.BlocksWaterDrawingBehindSelf[tileCache.type];
@@ -3934,7 +_,7 @@
         return WorldGen.InAPlaceWithWind(x, y, width, height);
     }
 
-    private void GetTileDrawData(int x, int y, Tile tileCache, ushort typeCache, ref short tileFrameX, ref short tileFrameY, out int tileWidth, out int tileHeight, out int tileTop, out int halfBrickHeight, out int addFrX, out int addFrY, out SpriteEffects tileSpriteEffect, out Texture2D glowTexture, out Rectangle glowSourceRect, out Color glowColor)
+    private void GetTileDrawData(int x, int y, ref TileData tileCache, ushort typeCache, ref short tileFrameX, ref short tileFrameY, out int tileWidth, out int tileHeight, out int tileTop, out int halfBrickHeight, out int addFrX, out int addFrY, out SpriteEffects tileSpriteEffect, out Texture2D glowTexture, out Rectangle glowSourceRect, out Color glowColor)
     {
         tileTop = 0;
         tileWidth = 16;
@@ -6019,10 +_,6 @@
     private bool IsWindBlocked(int x, int y)
     {
         Tile tile = Main.tile[x, y];
-        if (tile == null)
-        {
-            return true;
-        }
 
         if (tile.wall > 0 && !WallID.Sets.AllowsWind[tile.wall])
         {
@@ -6130,7 +_,7 @@
         _specialTilesCount = 0;
     }
 
-    private Color DrawTiles_GetLightOverride(int j, int i, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, Color tileLight)
+    private Color DrawTiles_GetLightOverride(int j, int i, ref TileData tileCache, ushort typeCache, short tileFrameX, short tileFrameY, Color tileLight)
     {
         if (tileCache.fullbrightBlock())
         {
@@ -6197,9 +_,9 @@
         return tileLight;
     }
 
-    private void DrawTiles_EmitParticles(int j, int i, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, Color tileLight)
+    private void DrawTiles_EmitParticles(int j, int i, ref TileData tileCache, ushort typeCache, short tileFrameX, short tileFrameY, Color tileLight)
     {
-        bool num = IsVisible(tileCache);
+        bool num = IsVisible(ref tileCache);
         int leafFrequency = _leafFrequency;
         leafFrequency /= 4;
         if (typeCache == 244 && tileFrameX == 18 && tileFrameY == 18 && _rand.Next(2) == 0)
@@ -6953,7 +_,7 @@
         }
     }
 
-    private void EmitLiquidDrops(int j, int i, Tile tileCache, ushort typeCache)
+    private void EmitLiquidDrops(int j, int i, ref TileData tileCache, ushort typeCache)
     {
         int num = 60;
         switch (typeCache)
@@ -7075,7 +_,7 @@
         return num2 * lerpValue;
     }
 
-    private bool ShouldSwayInWind(int x, int y, Tile tileCache)
+    private bool ShouldSwayInWind(int x, int y, ref TileData tileCache)
     {
         if (!Main.SettingsEnabled_TilesSwayInWind)
         {
@@ -7496,7 +_,7 @@
             int x = point.X;
             int y = point.Y;
             Tile tile = Main.tile[x, y];
-            if (tile == null || !tile.active())
+            if (!tile.active())
             {
                 continue;
             }
@@ -7817,8 +_,8 @@
             Point point = _specialPositions[num][i];
             int x = point.X;
             int y = point.Y;
-            Tile tile = Main.tile[x, y];
-            if (tile == null || !tile.active() || !IsVisible(tile))
+            ref TileData tile = ref Main.tile.GetTileRef(x, y);
+            if (!tile.active() || !IsVisible(ref tile))
             {
                 continue;
             }
@@ -7826,14 +_,14 @@
             ushort type = tile.type;
             short tileFrameX = tile.frameX;
             short tileFrameY = tile.frameY;
-            GetTileDrawData(x, y, tile, type, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var glowTexture, out var glowSourceRect, out var glowColor);
+            GetTileDrawData(x, y, ref tile, type, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var glowTexture, out var glowSourceRect, out var glowColor);
             bool flag = _rand.Next(4) == 0;
             Color tileLight = Lighting.GetColor(x, y);
-            DrawAnimatedTile_AdjustForVisionChangers(x, y, tile, type, tileFrameX, tileFrameY, ref tileLight, flag);
+            DrawAnimatedTile_AdjustForVisionChangers(x, y, ref tile, type, tileFrameX, tileFrameY, ref tileLight, flag);
-            tileLight = DrawTiles_GetLightOverride(y, x, tile, type, tileFrameX, tileFrameY, tileLight);
+            tileLight = DrawTiles_GetLightOverride(y, x, ref tile, type, tileFrameX, tileFrameY, tileLight);
             if (_isActiveAndNotPaused && flag)
             {
-                DrawTiles_EmitParticles(y, x, tile, type, tileFrameX, tileFrameY, tileLight);
+                DrawTiles_EmitParticles(y, x, ref tile, type, tileFrameX, tileFrameY, tileLight);
             }
 
             if (type == 83 && IsAlchemyPlantHarvestable(tileFrameX / 18))
@@ -7858,7 +_,7 @@
             num3 += GetWindGridPush(x, y, 20, 0.35f);
             position.X += num3 * 1f;
             position.Y += Math.Abs(num3) * 1f;
-            Texture2D tileDrawTexture = GetTileDrawTexture(tile, x, y);
+            Texture2D tileDrawTexture = GetTileDrawTexture(ref tile, x, y);
             if (tileDrawTexture != null)
             {
                 Main.spriteBatch.Draw(tileDrawTexture, position, new Rectangle(tileFrameX + addFrX, tileFrameY + addFrY, tileWidth, tileHeight - halfBrickHeight), tileLight, num3 * 0.1f, new Vector2(tileWidth / 2, 16 - halfBrickHeight - tileTop), 1f, tileSpriteEffect, 0f);
@@ -7881,8 +_,8 @@
             Point point = _specialPositions[num][i];
             int x = point.X;
             int y = point.Y;
-            Tile tile = Main.tile[x, y];
-            if (tile == null || !tile.active() || !IsVisible(tile))
+            ref TileData tile = ref Main.tile.GetTileRef(x, y);
+            if (!tile.active() || !IsVisible(ref tile))
             {
                 continue;
             }
@@ -7890,14 +_,14 @@
             ushort type = tile.type;
             short tileFrameX = tile.frameX;
             short tileFrameY = tile.frameY;
-            GetTileDrawData(x, y, tile, type, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var glowTexture, out var _, out var glowColor);
+            GetTileDrawData(x, y, ref tile, type, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var glowTexture, out var _, out var glowColor);
             bool flag = _rand.Next(4) == 0;
             Color tileLight = Lighting.GetColor(x, y);
-            DrawAnimatedTile_AdjustForVisionChangers(x, y, tile, type, tileFrameX, tileFrameY, ref tileLight, flag);
+            DrawAnimatedTile_AdjustForVisionChangers(x, y, ref tile, type, tileFrameX, tileFrameY, ref tileLight, flag);
-            tileLight = DrawTiles_GetLightOverride(y, x, tile, type, tileFrameX, tileFrameY, tileLight);
+            tileLight = DrawTiles_GetLightOverride(y, x, ref tile, type, tileFrameX, tileFrameY, tileLight);
             if (_isActiveAndNotPaused && flag)
             {
-                DrawTiles_EmitParticles(y, x, tile, type, tileFrameX, tileFrameY, tileLight);
+                DrawTiles_EmitParticles(y, x, ref tile, type, tileFrameX, tileFrameY, tileLight);
             }
 
             if (type == 83 && IsAlchemyPlantHarvestable(tileFrameX / 18))
@@ -7964,7 +_,7 @@
             }
 
             num3 += pushX * (float)num4 + pushY * (float)num5;
-            Texture2D tileDrawTexture = GetTileDrawTexture(tile, x, y);
+            Texture2D tileDrawTexture = GetTileDrawTexture(ref tile, x, y);
             if (tileDrawTexture != null)
             {
                 Main.spriteBatch.Draw(tileDrawTexture, position, new Rectangle(tileFrameX + addFrX, tileFrameY + addFrY, tileWidth, tileHeight - halfBrickHeight), tileLight, num3 * 0.1f, origin, 1f, tileSpriteEffect, 0f);
@@ -7976,9 +_,9 @@
         }
     }
 
-    private void DrawAnimatedTile_AdjustForVisionChangers(int i, int j, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, ref Color tileLight, bool canDoDust)
+    private void DrawAnimatedTile_AdjustForVisionChangers(int i, int j, ref TileData tileCache, ushort typeCache, short tileFrameX, short tileFrameY, ref Color tileLight, bool canDoDust)
     {
-        if (_localPlayer.dangerSense && IsTileDangerous(_localPlayer, tileCache, typeCache))
+        if (_localPlayer.dangerSense && IsTileDangerous(_localPlayer, ref tileCache, typeCache))
         {
             if (tileLight.R < byte.MaxValue)
             {
@@ -8115,7 +_,7 @@
         {
             Point p = _specialPositions[num][i];
             Tile tile = Main.tile[p.X, p.Y];
-            if (tile != null && tile.active())
+            if (tile.active())
             {
                 Texture2D value = TextureAssets.Extra[198].Value;
                 int frameY = tile.frameX / 54;
@@ -8150,7 +_,7 @@
         {
             Point p = _specialPositions[num][i];
             Tile tile = Main.tile[p.X, p.Y];
-            if (tile == null || !tile.active())
+            if (!tile.active())
             {
                 continue;
             }
@@ -8254,7 +_,7 @@
             int sizeX = 1;
             int num4 = 1;
             Tile tile = Main.tile[x, num3];
-            if (tile != null && tile.active())
+            if (tile.active())
             {
                 switch (Main.tile[x, num3].type)
                 {
@@ -8347,7 +_,7 @@
             int sizeX = 1;
             int sizeY = 1;
             Tile tile = Main.tile[x, y];
-            if (tile != null && tile.active())
+            if (tile.active())
             {
                 switch (Main.tile[x, y].type)
                 {
@@ -8459,9 +_,9 @@
         {
             for (int j = topLeftY; j < topLeftY + sizeY; j++)
             {
-                Tile tile = Main.tile[i, j];
+                ref TileData tile = ref Main.tile.GetTileRef(i, j);
                 ushort type2 = tile.type;
-                if (type2 != type || !IsVisible(tile))
+                if (type2 != type || !IsVisible(ref tile))
                 {
                     continue;
                 }
@@ -8480,14 +_,14 @@
                     num2 = 0f;
                 }
 
-                GetTileDrawData(i, j, tile, type2, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var _, out var _, out var _);
+                GetTileDrawData(i, j, ref tile, type2, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var _, out var _, out var _);
                 bool flag2 = _rand.Next(4) == 0;
                 Color tileLight = Lighting.GetColor(i, j);
-                DrawAnimatedTile_AdjustForVisionChangers(i, j, tile, type2, tileFrameX, tileFrameY, ref tileLight, flag2);
+                DrawAnimatedTile_AdjustForVisionChangers(i, j, ref tile, type2, tileFrameX, tileFrameY, ref tileLight, flag2);
-                tileLight = DrawTiles_GetLightOverride(j, i, tile, type2, tileFrameX, tileFrameY, tileLight);
+                tileLight = DrawTiles_GetLightOverride(j, i, ref tile, type2, tileFrameX, tileFrameY, tileLight);
                 if (_isActiveAndNotPaused && flag2)
                 {
-                    DrawTiles_EmitParticles(j, i, tile, type2, tileFrameX, tileFrameY, tileLight);
+                    DrawTiles_EmitParticles(j, i, ref tile, type2, tileFrameX, tileFrameY, tileLight);
                 }
 
                 Vector2 vector2 = new Vector2(i * 16 - (int)screenPosition.X, j * 16 - (int)screenPosition.Y + tileTop) + offSet;
@@ -8510,7 +_,7 @@
 
                 Vector2 vector3 = new Vector2(windCycle * 1f, Math.Abs(windCycle) * 2f * num2);
                 Vector2 origin = vector - vector2;
-                Texture2D tileDrawTexture = GetTileDrawTexture(tile, i, j);
+                Texture2D tileDrawTexture = GetTileDrawTexture(ref tile, i, j);
                 if (tileDrawTexture != null)
                 {
                     Main.spriteBatch.Draw(tileDrawTexture, vector + new Vector2(0f, vector3.Y), new Rectangle(tileFrameX + addFrX, tileFrameY + addFrY, tileWidth, tileHeight - halfBrickHeight), tileLight, windCycle * num * num2, origin, 1f, tileSpriteEffect, 0f);
@@ -8536,11 +_,7 @@
         float num5 = 0f;
         for (int i = startY; i < Main.maxTilesY - 10; i++)
         {
-            Tile tile = Main.tile[x, i];
-            if (tile == null)
-            {
-                continue;
-            }
+            ref TileData tile = ref Main.tile.GetTileRef(x, i);
 
             ushort type = tile.type;
             if (!tile.active() || !TileID.Sets.VineThreads[type])
@@ -8577,7 +_,7 @@
             short tileFrameX = tile.frameX;
             short tileFrameY = tile.frameY;
             Color color = Lighting.GetColor(x, i);
-            GetTileDrawData(x, i, tile, type, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var glowTexture, out var glowSourceRect, out var glowColor);
+            GetTileDrawData(x, i, ref tile, type, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var glowTexture, out var glowSourceRect, out var glowColor);
             Vector2 position = new Vector2(-(int)screenPosition.X, -(int)screenPosition.Y) + offSet + vector;
             if (tile.fullbrightBlock())
             {
@@ -8617,13 +_,13 @@
                 }
             }
 
-            Texture2D tileDrawTexture = GetTileDrawTexture(tile, x, i);
+            Texture2D tileDrawTexture = GetTileDrawTexture(ref tile, x, i);
             if (tileDrawTexture == null)
             {
                 break;
             }
 
-            if (IsVisible(tile))
+            if (IsVisible(ref tile))
             {
                 Main.spriteBatch.Draw(tileDrawTexture, position, new Rectangle(tileFrameX + addFrX, tileFrameY + addFrY, tileWidth, tileHeight - halfBrickHeight), color, num6, new Vector2(tileWidth / 2, halfBrickHeight - tileTop), 1f, tileSpriteEffect, 0f);
                 if (glowTexture != null)
@@ -8649,8 +_,7 @@
         float num5 = 0f;
         for (int num6 = startY; num6 > 10; num6--)
         {
-            Tile tile = Main.tile[x, num6];
-            if (tile != null)
+            ref TileData tile = ref Main.tile.GetTileRef(x, num6);
             {
                 ushort type = tile.type;
                 if (!tile.active() || !TileID.Sets.ReverseVineThreads[type])
@@ -8680,16 +_,16 @@
                 short tileFrameX = tile.frameX;
                 short tileFrameY = tile.frameY;
                 Color color = Lighting.GetColor(x, num6);
-                GetTileDrawData(x, num6, tile, type, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var _, out var _, out var _);
+                GetTileDrawData(x, num6, ref tile, type, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var _, out var _, out var _);
                 Vector2 position = new Vector2(-(int)screenPosition.X, -(int)screenPosition.Y) + offSet + vector;
                 float num7 = (float)num2 * (0f - num3) * windCycle + num4;
-                Texture2D tileDrawTexture = GetTileDrawTexture(tile, x, num6);
+                Texture2D tileDrawTexture = GetTileDrawTexture(ref tile, x, num6);
                 if (tileDrawTexture == null)
                 {
                     break;
                 }
 
-                if (IsVisible(tile))
+                if (IsVisible(ref tile))
                 {
                     Main.spriteBatch.Draw(tileDrawTexture, position, new Rectangle(tileFrameX + addFrX, tileFrameY + addFrY, tileWidth, tileHeight - halfBrickHeight), color, num7, new Vector2(tileWidth / 2, halfBrickHeight - tileTop + tileHeight), 1f, tileSpriteEffect, 0f);
                 }
@@ -8952,9 +_,9 @@
         {
             for (int j = topLeftY; j < topLeftY + sizeY; j++)
             {
-                Tile tile2 = Main.tile[i, j];
+                ref TileData tile2 = ref Main.tile.GetTileRef(i, j);
                 ushort type2 = tile2.type;
-                if (type2 != type || !IsVisible(tile2))
+                if (type2 != type || !IsVisible(ref tile2))
                 {
                     continue;
                 }
@@ -8978,21 +_,21 @@
                     num7 = 0f;
                 }
 
-                GetTileDrawData(i, j, tile2, type2, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var _, out var _, out var _);
+                GetTileDrawData(i, j, ref tile2, type2, ref tileFrameX, ref tileFrameY, out var tileWidth, out var tileHeight, out var tileTop, out var halfBrickHeight, out var addFrX, out var addFrY, out var tileSpriteEffect, out var _, out var _, out var _);
                 bool flag3 = _rand.Next(4) == 0;
                 Color tileLight = Lighting.GetColor(i, j);
-                DrawAnimatedTile_AdjustForVisionChangers(i, j, tile2, type2, tileFrameX, tileFrameY, ref tileLight, flag3);
+                DrawAnimatedTile_AdjustForVisionChangers(i, j, ref tile2, type2, tileFrameX, tileFrameY, ref tileLight, flag3);
-                tileLight = DrawTiles_GetLightOverride(j, i, tile2, type2, tileFrameX, tileFrameY, tileLight);
+                tileLight = DrawTiles_GetLightOverride(j, i, ref tile2, type2, tileFrameX, tileFrameY, tileLight);
                 if (_isActiveAndNotPaused && flag3)
                 {
-                    DrawTiles_EmitParticles(j, i, tile2, type2, tileFrameX, tileFrameY, tileLight);
+                    DrawTiles_EmitParticles(j, i, ref tile2, type2, tileFrameX, tileFrameY, tileLight);
                 }
 
                 Vector2 vector3 = new Vector2(i * 16 - (int)screenPosition.X, j * 16 - (int)screenPosition.Y + tileTop) + offSet;
                 vector3 += vector2;
                 Vector2 vector4 = new Vector2(windCycle * num4, Math.Abs(windCycle) * num5 * num7);
                 Vector2 vector5 = vector - vector3;
-                Texture2D tileDrawTexture = GetTileDrawTexture(tile2, i, j);
+                Texture2D tileDrawTexture = GetTileDrawTexture(ref tile2, i, j);
                 if (tileDrawTexture != null)
                 {
                     Vector2 vector6 = vector + new Vector2(0f, vector4.Y);
