--- src/Terraria/Terraria/GameContent/Drawing/WallDrawing.cs
+++ src/TerraAngel/Terraria/GameContent/Drawing/WallDrawing.cs
@@ -1,14 +_,11 @@
 using System.Diagnostics;
-using Microsoft.Xna.Framework;
-using Microsoft.Xna.Framework.Graphics;
 using Terraria.Graphics;
-using Terraria.ID;
 
 namespace Terraria.GameContent.Drawing;
 public class WallDrawing
 {
     private static VertexColors _glowPaintColors = new VertexColors(Color.White);
-    private Tile[,] _tileArray;
+    private NativeTileMap _tileArray;
     private TilePaintSystemV2 _paintSystem;
     private bool _shouldShowInvisibleWalls;
     public void LerpVertexColorsWithColor(ref VertexColors colors, Color lerpColor, float percent)
@@ -38,6 +_,7 @@
         int offScreenRange = Main.offScreenRange;
         bool drawToScreen = Main.drawToScreen;
         Vector2 screenPosition = Main.screenPosition;
+        Vector2i intScreenPosition = screenPosition;
         int screenWidth = Main.screenWidth;
         int screenHeight = Main.screenHeight;
         int maxTilesX = Main.maxTilesX;
@@ -92,15 +_,10 @@
         {
             for (int j = num5 - num9 + screenOverdrawOffset.X; j < num6 + num9 - screenOverdrawOffset.X; j++)
             {
-                Tile tile = _tileArray[j, i];
-                if (tile == null)
-                {
-                    tile = new Tile();
-                    _tileArray[j, i] = tile;
-                }
+                ref TileData tile = ref Main.tile.GetTileRef(j, i);
 
                 ushort wall = tile.wall;
-                if (wall <= 0 || FullTile(j, i) || (wall == 318 && !_shouldShowInvisibleWalls) || (tile.invisibleWall() && !_shouldShowInvisibleWalls))
+                if (wall == 0 || FullTile(j, i) || (wall == 318 && !_shouldShowInvisibleWalls) || (tile.invisibleWall() && !_shouldShowInvisibleWalls))
                 {
                     continue;
                 }
@@ -132,9 +_,9 @@
                     value.Y = tile.wallFrameY() + 180 * (num12 / num11);
                 }
 
-                if (Lighting.NotRetro && !Main.wallLight[wall] && tile.wall != 241 && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
+                if (Lighting.NotRetro && !Main.wallLight[wall] && tile.wall != 241 && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(ref tile))
                 {
-                    Texture2D tileDrawTexture = GetTileDrawTexture(tile, j, i);
+                    Texture2D tileDrawTexture = GetTileDrawTexture(ref tile);
                     if (tile.wall == 346)
                     {
                         vertices.TopRightColor = (vertices.TopLeftColor = (vertices.BottomRightColor = (vertices.BottomLeftColor = new Color((byte)Main.DiscoR, (byte)Main.DiscoG, (byte)Main.DiscoB))));
@@ -158,7 +_,7 @@
                         }
                     }
 
-                    tileBatch.Draw(tileDrawTexture, new Vector2(j * 16 - (int)screenPosition.X - 8, i * 16 - (int)screenPosition.Y - 8) + vector, value, vertices, Vector2.Zero, 1f, SpriteEffects.None);
+                    tileBatch.Draw(tileDrawTexture, new Vector2(j * 16 - intScreenPosition.X - 8, i * 16 - intScreenPosition.Y - 8) + vector, value, vertices, Vector2.Zero, 1f, SpriteEffects.None);
                 }
                 else
                 {
@@ -173,34 +_,41 @@
                         color2 = Color.Lerp(color2, Color.White, 0.5f);
                     }
 
-                    Texture2D tileDrawTexture2 = GetTileDrawTexture(tile, j, i);
+                    Texture2D tileDrawTexture2 = GetTileDrawTexture(ref tile);
-                    spriteBatch.Draw(tileDrawTexture2, new Vector2(j * 16 - (int)screenPosition.X - 8, i * 16 - (int)screenPosition.Y - 8) + vector, value, color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
+                    spriteBatch.Draw(tileDrawTexture2, new Vector2(j * 16 - intScreenPosition.X - 8, i * 16 - intScreenPosition.Y - 8) + vector, value, color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                 }
 
                 if (color.R > num2 || color.G > num3 || color.B > num4)
                 {
-                    bool num13 = _tileArray[j - 1, i].wall > 0 && wallBlend[_tileArray[j - 1, i].wall] != wallBlend[tile.wall];
-                    bool flag = _tileArray[j + 1, i].wall > 0 && wallBlend[_tileArray[j + 1, i].wall] != wallBlend[tile.wall];
-                    bool flag2 = _tileArray[j, i - 1].wall > 0 && wallBlend[_tileArray[j, i - 1].wall] != wallBlend[tile.wall];
-                    bool flag3 = _tileArray[j, i + 1].wall > 0 && wallBlend[_tileArray[j, i + 1].wall] != wallBlend[tile.wall];
+                    Tile leftTile = _tileArray[j - 1, i];
+                    Tile rightTile = _tileArray[j + 1, i];
+                    Tile upTile = _tileArray[j, i - 1];
+                    Tile downTile = _tileArray[j, i + 1];
+
+                    int blend = wallBlend[tile.wall];
+
+                    bool num13 = leftTile.wall > 0 && wallBlend[leftTile.wall] != blend;
+                    bool flag = rightTile.wall > 0 && wallBlend[rightTile.wall] != blend;
+                    bool flag2 = upTile.wall > 0 && wallBlend[upTile.wall] != blend;
+                    bool flag3 = downTile.wall > 0 && wallBlend[downTile.wall] != blend;
                     if (num13)
                     {
-                        spriteBatch.Draw(TextureAssets.WallOutline.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + vector, new Rectangle(0, 0, 2, 16), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
+                        spriteBatch.Draw(TextureAssets.WallOutline.Value, new Vector2(j * 16 - intScreenPosition.X, i * 16 - intScreenPosition.Y) + vector, new Rectangle(0, 0, 2, 16), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                     }
 
                     if (flag)
                     {
-                        spriteBatch.Draw(TextureAssets.WallOutline.Value, new Vector2(j * 16 - (int)screenPosition.X + 14, i * 16 - (int)screenPosition.Y) + vector, new Rectangle(14, 0, 2, 16), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
+                        spriteBatch.Draw(TextureAssets.WallOutline.Value, new Vector2(j * 16 - intScreenPosition.X + 14, i * 16 - intScreenPosition.Y) + vector, new Rectangle(14, 0, 2, 16), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                     }
 
                     if (flag2)
                     {
-                        spriteBatch.Draw(TextureAssets.WallOutline.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + vector, new Rectangle(0, 0, 16, 2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
+                        spriteBatch.Draw(TextureAssets.WallOutline.Value, new Vector2(j * 16 - intScreenPosition.X, i * 16 - intScreenPosition.Y) + vector, new Rectangle(0, 0, 16, 2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                     }
 
                     if (flag3)
                     {
-                        spriteBatch.Draw(TextureAssets.WallOutline.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y + 14) + vector, new Rectangle(0, 14, 16, 2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
+                        spriteBatch.Draw(TextureAssets.WallOutline.Value, new Vector2(j * 16 - intScreenPosition.X, i * 16 - intScreenPosition.Y + 14) + vector, new Rectangle(0, 14, 16, 2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                     }
                 }
             }
@@ -211,7 +_,7 @@
         TimeLogger.DrawTime(2, stopwatch.Elapsed.TotalMilliseconds);
     }
 
-    private Texture2D GetTileDrawTexture(Tile tile, int tileX, int tileY)
+    private Texture2D GetTileDrawTexture(ref TileData tile)
     {
         Texture2D result = TextureAssets.Wall[tile.wall].Value;
         int wall = tile.wall;
@@ -226,16 +_,12 @@
 
     protected bool FullTile(int x, int y)
     {
-        if (_tileArray[x - 1, y] == null || _tileArray[x - 1, y].blockType() != 0 || _tileArray[x + 1, y] == null || _tileArray[x + 1, y].blockType() != 0)
+        if (_tileArray[x - 1, y].blockType() != 0 || _tileArray[x + 1, y].blockType() != 0)
         {
             return false;
         }
 
         Tile tile = _tileArray[x, y];
-        if (tile == null)
-        {
-            return false;
-        }
 
         if (tile.active())
         {
