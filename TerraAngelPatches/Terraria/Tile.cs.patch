--- src/Terraria/Terraria/Tile.cs
+++ src/TerraAngel/Terraria/Tile.cs
@@ -1,18 +_,45 @@
+using System;
+using System.Collections.Generic;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
 using Microsoft.Xna.Framework;
 using Terraria.DataStructures;
 
 namespace Terraria;
-public class Tile
+public unsafe struct Tile
 {
-    public ushort type;
-    public ushort wall;
-    public byte liquid;
-    public ushort sTileHeader;
-    public byte bTileHeader;
-    public byte bTileHeader2;
-    public byte bTileHeader3;
-    public short frameX;
-    public short frameY;
+    public readonly TileData* Data;
+    public readonly ref TileData RefData => ref Unsafe.AsRef<TileData>(Data);
+    public ref ushort type => ref Data->type;
+    public ref ushort wall => ref Data->wall;
+    public ref short frameX => ref Data->frameX;
+    public ref short frameY => ref Data->frameY;
+    public ref ushort sTileHeader => ref Data->sTileHeader;
+    public ref byte liquid => ref Data->liquid;
+    public ref byte bTileHeader => ref Data->bTileHeader;
+    public ref byte bTileHeader2 => ref Data->bTileHeader2;
+    public ref byte bTileHeader3 => ref Data->bTileHeader3;
+    public Tile()
+    {
+        Data = null;
+    }
+    public Tile(ref TileData data)
+    {
+        Data = (TileData*)Unsafe.AsPointer(ref data);
+    }
+    public Tile(TileData* data)
+    {
+        Data = data;
+    }
+    public static implicit operator Tile(ImplicitHack? o)
+    {
+        return new Tile();
+    }
+    public static bool operator ==(Tile rhs, object lhs) => lhs == null && rhs.Data == null;
+    public static bool operator !=(Tile rhs, object lhs) => !(lhs == null && rhs.Data == null);
+    public override bool Equals(object? obj) => obj is Tile tile && tile.Data == this.Data;
+    public override int GetHashCode() => HashCode.Combine(*Data);
+    public class ImplicitHack { }
     private const int Bit0 = 1;
     private const int Bit1 = 2;
     private const int Bit2 = 4;
@@ -62,140 +_,16 @@
         }
     }
 
-    public Tile()
-    {
-        type = 0;
-        wall = 0;
-        liquid = 0;
-        sTileHeader = 0;
-        bTileHeader = 0;
-        bTileHeader2 = 0;
-        bTileHeader3 = 0;
-        frameX = 0;
-        frameY = 0;
-    }
-
-    public Tile(Tile copy)
-    {
-        if (copy == null)
-        {
-            type = 0;
-            wall = 0;
-            liquid = 0;
-            sTileHeader = 0;
-            bTileHeader = 0;
-            bTileHeader2 = 0;
-            bTileHeader3 = 0;
-            frameX = 0;
-            frameY = 0;
-        }
-        else
-        {
-            type = copy.type;
-            wall = copy.wall;
-            liquid = copy.liquid;
-            sTileHeader = copy.sTileHeader;
-            bTileHeader = copy.bTileHeader;
-            bTileHeader2 = copy.bTileHeader2;
-            bTileHeader3 = copy.bTileHeader3;
-            frameX = copy.frameX;
-            frameY = copy.frameY;
-        }
-    }
-
-    public object Clone()
-    {
-        return MemberwiseClone();
-    }
-
-    public void ClearEverything()
-    {
-        type = 0;
-        wall = 0;
-        liquid = 0;
-        sTileHeader = 0;
-        bTileHeader = 0;
-        bTileHeader2 = 0;
-        bTileHeader3 = 0;
-        frameX = 0;
-        frameY = 0;
-    }
-
-    public void ClearTile()
-    {
-        slope(0);
-        halfBrick(halfBrick: false);
-        active(active: false);
-        inActive(inActive: false);
-    }
+    public void ClearEverything() => Data->ClearEverything();
+
+    public void ClearTile() => Data->ClearTile();
 
     public void CopyFrom(Tile from)
     {
-        type = from.type;
-        wall = from.wall;
-        liquid = from.liquid;
-        sTileHeader = from.sTileHeader;
-        bTileHeader = from.bTileHeader;
-        bTileHeader2 = from.bTileHeader2;
-        bTileHeader3 = from.bTileHeader3;
-        frameX = from.frameX;
-        frameY = from.frameY;
+        *Data = *from.Data;
     }
 
-    public bool isTheSameAs(Tile compTile)
-    {
-        if (compTile == null)
-        {
-            return false;
-        }
-
-        if (sTileHeader != compTile.sTileHeader)
-        {
-            return false;
-        }
-
-        if (active())
-        {
-            if (type != compTile.type)
-            {
-                return false;
-            }
-
-            if (Main.tileFrameImportant[type] && (frameX != compTile.frameX || frameY != compTile.frameY))
-            {
-                return false;
-            }
-        }
-
-        if (wall != compTile.wall || liquid != compTile.liquid)
-        {
-            return false;
-        }
-
-        if (compTile.liquid == 0)
-        {
-            if (wallColor() != compTile.wallColor())
-            {
-                return false;
-            }
-
-            if (wire4() != compTile.wire4())
-            {
-                return false;
-            }
-        }
-        else if (bTileHeader != compTile.bTileHeader)
-        {
-            return false;
-        }
-
-        if (invisibleBlock() != compTile.invisibleBlock() || invisibleWall() != compTile.invisibleWall() || fullbrightBlock() != compTile.fullbrightBlock() || fullbrightWall() != compTile.fullbrightWall())
-        {
-            return false;
-        }
-
-        return true;
-    }
+    public bool isTheSameAs(Tile compTile) => Data->isTheSameAs(compTile);
 
     public int blockType()
     {
@@ -247,28 +_,9 @@
         return false;
     }
 
-    public void ResetToType(ushort type)
-    {
-        liquid = 0;
-        sTileHeader = 32;
-        bTileHeader = 0;
-        bTileHeader2 = 0;
-        bTileHeader3 = 0;
-        frameX = 0;
-        frameY = 0;
-        this.type = type;
-    }
+    public void ResetToType(ushort type) => Data->ResetToType(type);
 
-    internal void ClearMetadata()
-    {
-        liquid = 0;
-        sTileHeader = 0;
-        bTileHeader = 0;
-        bTileHeader2 = 0;
-        bTileHeader3 = 0;
-        frameX = 0;
-        frameY = 0;
-    }
+    internal void ClearMetadata() => Data->ClearMetadata();
 
     public Color actColor(Color oldColor)
     {
@@ -697,60 +_,7 @@
         }
     }
 
-    public void Clear(TileDataType types)
-    {
-        if ((types & TileDataType.Tile) != 0)
-        {
-            type = 0;
-            active(active: false);
-            frameX = 0;
-            frameY = 0;
-        }
-
-        if ((types & TileDataType.Wall) != 0)
-        {
-            wall = 0;
-            wallFrameX(0);
-            wallFrameY(0);
-        }
-
-        if ((types & TileDataType.TilePaint) != 0)
-        {
-            ClearBlockPaintAndCoating();
-        }
-
-        if ((types & TileDataType.WallPaint) != 0)
-        {
-            ClearWallPaintAndCoating();
-        }
-
-        if ((types & TileDataType.Liquid) != 0)
-        {
-            liquid = 0;
-            liquidType(0);
-            checkingLiquid(checkingLiquid: false);
-        }
-
-        if ((types & TileDataType.Slope) != 0)
-        {
-            slope(0);
-            halfBrick(halfBrick: false);
-        }
-
-        if ((types & TileDataType.Wiring) != 0)
-        {
-            wire(wire: false);
-            wire2(wire2: false);
-            wire3(wire3: false);
-            wire4(wire4: false);
-        }
-
-        if ((types & TileDataType.Actuator) != 0)
-        {
-            actuator(actuator: false);
-            inActive(inActive: false);
-        }
-    }
+    public void Clear(TileDataType types) => Data->Clear(types);
 
     public static void SmoothSlope(int x, int y, bool applyToNeighbors = true, bool sync = false)
     {
@@ -762,7 +_,7 @@
             SmoothSlope(x, y - 1, applyToNeighbors: false, sync);
         }
 
-        Tile tile = Main.tile[x, y];
+        ref TileData tile = ref Main.tile.GetTileRef(x, y);
         if (!WorldGen.CanPoundTile(x, y) || !WorldGen.SolidOrSlopedTile(x, y))
         {
             return;
@@ -832,12 +_,7 @@
         }
     }
 
-    public void CopyPaintAndCoating(Tile other)
-    {
-        color(other.color());
-        invisibleBlock(other.invisibleBlock());
-        fullbrightBlock(other.fullbrightBlock());
-    }
+    public void CopyPaintAndCoating(Tile other) => Data->CopyPaintAndCoating(ref other.RefData);
 
     public TileColorCache BlockColorAndCoating()
     {
